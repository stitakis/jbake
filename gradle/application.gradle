apply plugin: 'application'

mainClassName = "org.jbake.launcher.Main"
applicationName = "jbake"

def examplesBase = "$project.buildDir/examples"

def exampleRepositories = [
    "example_project_freemarker": "https://github.com/jbake-org/jbake-example-project-freemarker.git",
    "example_project_groovy"    : "https://github.com/jbake-org/jbake-example-project-groovy.git",
    "example_project_thymeleaf" : "https://github.com/jbake-org/jbake-example-project-thymeleaf.git",
    "example_project_groovy-mte": "https://github.com/jbake-org/jbake-example-project-groovy-mte.git",
    "example_project_jade"      : "https://github.com/jbake-org/jbake-example-project-jade.git"
]

//create clone and Zip Task for each repository
exampleRepositories.each { name, repository ->

    task "clone_${name}Repository"() {
        group = "distribution"
        description "Clone jbake ${name} example project repository"

        def repositoryName = "$examplesBase/$name"

        outputs.dir repositoryName

        doLast {
            grgit.clone(dir: repositoryName, uri: repository)
        }
    }

    task "${name}Zip"(type: Zip) {
        group "distribution"
        description "Zip $name repository"

        archiveBaseName = name
        archiveFileName = "${archiveBaseName.get()}.zip"

        from project.tasks.getByName("clone_${name}Repository").outputs
        exclude 'README.md'
        exclude 'LICENSE'
        exclude '.git'
    }

}

distributions {
    main {
        contents {
            //Include Outputs from zip tasks
            exampleRepositories.each { name, repository ->
                def task = project.tasks.getByName("${name}Zip")
                from(task)
            }
        }
    }
}

startScripts {
    defaultJvmOpts = ['-XX:MaxDirectMemorySize=512m','-Djna.nosys=true']
    classpath = files("lib","logging")

    /**
     * The startScripts produces scripts that contain `$APP_HOME/lib/lib` in the classpath
     * so we need to tweak it a bit to be able to add the whole lib directory to the classpath :|
     *
     * While we are add it we add current dir + lib/logging and lib/* to allow user to setup logging
     * and additional/override jar dependencies.
     * See https://stackoverflow.com/questions/10518603/adding-classpath-entries-using-gradles-application-plugin
     */
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\lib', '%DIRNAME%\\lib\\logging;%DIRNAME%\\lib\\*;%APP_HOME%\\lib\\*')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/lib', '$SAVED/lib/logging:$SAVED/lib/*:$APP_HOME/lib/*')
    }
}

distZip {
    archiveClassifier.set("bin")
}
